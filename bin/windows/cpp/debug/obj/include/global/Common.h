// Generated by Haxe 3.4.0
#ifndef INCLUDED_global_Common
#define INCLUDED_global_Common

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_7ee4709dfe1b7650_20_new)
HX_DECLARE_CLASS0(Main)
HX_DECLARE_CLASS1(file,SaveManager)
HX_DECLARE_CLASS1(global,Common)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS1(lr,Track)
HX_DECLARE_CLASS2(lr,line,Grid)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,MovieClip)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(ui,tool,ToolBase)

namespace global{


class HXCPP_CLASS_ATTRIBUTES Common_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Common_obj OBJ_;
		Common_obj();

	public:
		enum { _hx_ClassId = 0x017edfd2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="global.Common")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"global.Common"); }

		hx::ObjectPtr< Common_obj > __new() {
			hx::ObjectPtr< Common_obj > __this = new Common_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Common_obj > __alloc(hx::Ctx *_hx_ctx) {
			Common_obj *__this = (Common_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Common_obj), false, "global.Common"));
			*(void **)__this = Common_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_7ee4709dfe1b7650_20_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Common_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Common","\x4b","\xe9","\xc2","\xfb"); }

		static void __boot();
		static ::String version;
		static  ::openfl::display::Stage gStage;
		static  ::Main gCode;
		static  ::lr::Track gTrack;
		static  ::openfl::display::MovieClip gVisContainer;
		static  ::ui::tool::ToolBase gToolBase;
		static  ::Dynamic gToolCurrent;
		static  ::lr::line::Grid gGrid;
		static  ::file::SaveManager gSaveManager;
		static int line_minLength;
		static int line_type;
		static int sLineCount;
		static int sBLueLineCount;
		static int sRedLineCount;
		static int sGreenLineCount;
		static Float track_scale;
		static Float track_scale_max;
		static Float track_scale_min;
		static bool cvar_icon_hit_display;
		static int cvar_line_render_mode;
		static ::String cvar_track_author;
		static Float stage_width;
		static Float stage_height;
		static Float get_angle_radians( ::openfl::geom::Point _a, ::openfl::geom::Point _b);
		static ::Dynamic get_angle_radians_dyn();

		static Float get_angle_degrees( ::openfl::geom::Point _a, ::openfl::geom::Point _b);
		static ::Dynamic get_angle_degrees_dyn();

		static  ::openfl::geom::Point get_point_vector(int _dis,Float _ang);
		static ::Dynamic get_point_vector_dyn();

		static Float get_distance( ::openfl::geom::Point _a, ::openfl::geom::Point _b);
		static ::Dynamic get_distance_dyn();

		static  ::openfl::geom::Point get_distance_point( ::openfl::geom::Point _a, ::openfl::geom::Point _b);
		static ::Dynamic get_distance_point_dyn();

};

} // end namespace global

#endif /* INCLUDED_global_Common */ 
