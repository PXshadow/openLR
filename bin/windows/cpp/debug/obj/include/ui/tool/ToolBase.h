// Generated by Haxe 3.4.0
#ifndef INCLUDED_ui_tool_ToolBase
#define INCLUDED_ui_tool_ToolBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(ui,tool,ToolBase)

namespace ui{
namespace tool{


class HXCPP_CLASS_ATTRIBUTES ToolBase_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ToolBase_obj OBJ_;
		ToolBase_obj();

	public:
		enum { _hx_ClassId = 0x392974d5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ui.tool.ToolBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"ui.tool.ToolBase"); }
		static hx::ObjectPtr< ToolBase_obj > __new();
		static hx::ObjectPtr< ToolBase_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ToolBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ToolBase","\xa9","\xb7","\x29","\x89"); }

		::String type;
		bool mod_shift;
		void KeyNumDown( ::openfl::events::KeyboardEvent e);
		::Dynamic KeyNumDown_dyn();

		void keyShiftUp( ::openfl::events::KeyboardEvent e);
		::Dynamic keyShiftUp_dyn();

		void keyShiftDown( ::openfl::events::KeyboardEvent e);
		::Dynamic keyShiftDown_dyn();

		void mMouseUp( ::openfl::events::MouseEvent e);
		::Dynamic mMouseUp_dyn();

		void mMouseDown( ::openfl::events::MouseEvent e);
		::Dynamic mMouseDown_dyn();

		void rMouseUp( ::openfl::events::MouseEvent e);
		::Dynamic rMouseUp_dyn();

		void rMouseDown( ::openfl::events::MouseEvent e);
		::Dynamic rMouseDown_dyn();

		virtual void mouseUp( ::openfl::events::MouseEvent e);
		::Dynamic mouseUp_dyn();

		virtual void mouseDown( ::openfl::events::MouseEvent e);
		::Dynamic mouseDown_dyn();

		void disable();
		::Dynamic disable_dyn();

		void enable();
		::Dynamic enable_dyn();

		void mouseScroll( ::openfl::events::MouseEvent e);
		::Dynamic mouseScroll_dyn();

};

} // end namespace ui
} // end namespace tool

#endif /* INCLUDED_ui_tool_ToolBase */ 
