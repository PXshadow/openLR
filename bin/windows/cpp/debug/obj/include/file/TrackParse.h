// Generated by Haxe 3.4.0
#ifndef INCLUDED_file_TrackParse
#define INCLUDED_file_TrackParse

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(file,TrackParse)

namespace file{


class HXCPP_CLASS_ATTRIBUTES TrackParse_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TrackParse_obj OBJ_;
		TrackParse_obj();

	public:
		enum { _hx_ClassId = 0x17c59904 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="file.TrackParse")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"file.TrackParse"); }
		static hx::ObjectPtr< TrackParse_obj > __new();
		static hx::ObjectPtr< TrackParse_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TrackParse_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TrackParse","\xc8","\xdd","\x8c","\xe1"); }

		::cpp::VirtualArray lines;
		 ::Dynamic trackData;
		 ::Dynamic parse();
		::Dynamic parse_dyn();

};

} // end namespace file

#endif /* INCLUDED_file_TrackParse */ 
