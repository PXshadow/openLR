// Generated by Haxe 3.4.0
#ifndef INCLUDED_lr_Track
#define INCLUDED_lr_Track

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
HX_DECLARE_CLASS1(lr,Track)
HX_DECLARE_CLASS2(lr,line,Grid)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,MovieClip)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace lr{


class HXCPP_CLASS_ATTRIBUTES Track_obj : public  ::openfl::display::MovieClip_obj
{
	public:
		typedef  ::openfl::display::MovieClip_obj super;
		typedef Track_obj OBJ_;
		Track_obj();

	public:
		enum { _hx_ClassId = 0x13706b39 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lr.Track")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lr.Track"); }
		static hx::ObjectPtr< Track_obj > __new();
		static hx::ObjectPtr< Track_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Track_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Track","\x6b","\xfe","\x4c","\xa9"); }

		 ::lr::line::Grid grid;
		void add_vis_line( ::Dynamic line);
		::Dynamic add_vis_line_dyn();

		void render_preview_line( ::openfl::geom::Point _a, ::openfl::geom::Point _b);
		::Dynamic render_preview_line_dyn();

		void clear_preview();
		::Dynamic clear_preview_dyn();

		void update_render();
		::Dynamic update_render_dyn();

};

} // end namespace lr

#endif /* INCLUDED_lr_Track */ 
