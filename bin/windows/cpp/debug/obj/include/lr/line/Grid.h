// Generated by Haxe 3.4.0
#ifndef INCLUDED_lr_line_Grid
#define INCLUDED_lr_line_Grid

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lr,line,Grid)

namespace lr{
namespace line{


class HXCPP_CLASS_ATTRIBUTES Grid_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Grid_obj OBJ_;
		Grid_obj();

	public:
		enum { _hx_ClassId = 0x12781da8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lr.line.Grid")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lr.line.Grid"); }
		static hx::ObjectPtr< Grid_obj > __new();
		static hx::ObjectPtr< Grid_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Grid_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Grid","\xe6","\x02","\x45","\x2f"); }

		::cpp::VirtualArray lines;
		::Array< ::Dynamic> grid0;
		::Array< ::Dynamic> grid1;
		::Array< ::Dynamic> grid2;
		::Array< ::Dynamic> grid3;
		void massLineIndex( ::Dynamic line);
		::Dynamic massLineIndex_dyn();

};

} // end namespace lr
} // end namespace line

#endif /* INCLUDED_lr_line_Grid */ 
