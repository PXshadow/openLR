// Generated by Haxe 3.4.0
#ifndef INCLUDED_lr_Toolbar
#define INCLUDED_lr_Toolbar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
HX_DECLARE_CLASS1(lr,Toolbar)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,MovieClip)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS3(ui,tool,icon,IconBase)
HX_DECLARE_CLASS3(ui,tool,icon,IconLine)
HX_DECLARE_CLASS3(ui,tool,icon,IconPencil)

namespace lr{


class HXCPP_CLASS_ATTRIBUTES Toolbar_obj : public  ::openfl::display::MovieClip_obj
{
	public:
		typedef  ::openfl::display::MovieClip_obj super;
		typedef Toolbar_obj OBJ_;
		Toolbar_obj();

	public:
		enum { _hx_ClassId = 0x547c0f8d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lr.Toolbar")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lr.Toolbar"); }
		static hx::ObjectPtr< Toolbar_obj > __new();
		static hx::ObjectPtr< Toolbar_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Toolbar_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Toolbar","\x5b","\x25","\xd0","\x37"); }

		static  ::Dynamic tool;
		 ::ui::tool::icon::IconPencil pencil;
		 ::ui::tool::icon::IconLine line;
};

} // end namespace lr

#endif /* INCLUDED_lr_Toolbar */ 
