// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_file_TrackParse
#include <file/TrackParse.h>
#endif
#ifndef INCLUDED_global_Common
#include <global/Common.h>
#endif
#ifndef INCLUDED_lr_line_Grid
#include <lr/line/Grid.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d49296b62cdf2af_16_new,"file.TrackParse","new",0x94e5946c,"file.TrackParse.new","file/TrackParse.hx",16,0xcdad2fe3)
HX_LOCAL_STACK_FRAME(_hx_pos_8d49296b62cdf2af_20_parse,"file.TrackParse","parse",0xece96f3f,"file.TrackParse.parse","file/TrackParse.hx",20,0xcdad2fe3)
namespace file{

void TrackParse_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8d49296b62cdf2af_16_new)
            	}

Dynamic TrackParse_obj::__CreateEmpty() { return new TrackParse_obj; }

void *TrackParse_obj::_hx_vtable = 0;

Dynamic TrackParse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TrackParse_obj > _hx_result = new TrackParse_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TrackParse_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x17c59904;
}

 ::Dynamic TrackParse_obj::parse(){
            	HX_STACKFRAME(&_hx_pos_8d49296b62cdf2af_20_parse)
HXLINE(  21)		this->lines = ::global::Common_obj::gGrid->lines;
HXLINE(  23)		 ::Dynamic this1 =  ::Dynamic(hx::Anon_obj::Create(0));
HXDLIN(  23)		this->trackData = this1;
HXLINE(  24)		this->trackData->__SetField(HX_("a",61,00,00,00),::global::Common_obj::version,hx::paccDynamic);
HXLINE(  25)		this->trackData->__SetField(HX_("b",62,00,00,00),::global::Common_obj::cvar_track_author,hx::paccDynamic);
HXLINE(  26)		this->trackData->__SetField(HX_("c",63,00,00,00),::Date_obj::now(),hx::paccDynamic);
HXLINE(  27)		this->trackData->__SetField(HX_("d",64,00,00,00),this->lines->get_length(),hx::paccDynamic);
HXLINE(  28)		this->trackData->__SetField(HX_("e",65,00,00,00),::cpp::VirtualArray_obj::__new(),hx::paccDynamic);
HXLINE(  30)		{
HXLINE(  30)			int _g1 = (int)0;
HXDLIN(  30)			int _g = this->lines->get_length();
HXDLIN(  30)			while((_g1 < _g)){
HXLINE(  30)				_g1 = (_g1 + (int)1);
HXDLIN(  30)				int i = (_g1 - (int)1);
HXLINE(  31)				 ::Dynamic _hx_tmp =  ::Dynamic(this->trackData->__Field(HX_("e",65,00,00,00),hx::paccDynamic));
HXDLIN(  31)				 ::Dynamic this2 =  ::Dynamic(hx::Anon_obj::Create(0));
HXDLIN(  31)				_hx_tmp->__SetItem(i,this2);
HXLINE(  32)				 ::Dynamic(this->trackData->__Field(HX_("e",65,00,00,00),hx::paccDynamic))->__GetItem(i)->__SetField(HX_("a",61,00,00,00), ::Dynamic(this->lines->__get(i)->__Field(HX_("a",61,00,00,00),hx::paccDynamic)),hx::paccDynamic);
HXLINE(  33)				 ::Dynamic(this->trackData->__Field(HX_("e",65,00,00,00),hx::paccDynamic))->__GetItem(i)->__SetField(HX_("b",62,00,00,00), ::Dynamic(this->lines->__get(i)->__Field(HX_("b",62,00,00,00),hx::paccDynamic)),hx::paccDynamic);
HXLINE(  34)				 ::Dynamic(this->trackData->__Field(HX_("e",65,00,00,00),hx::paccDynamic))->__GetItem(i)->__SetField(HX_("type",ba,f2,08,4d), ::Dynamic(this->lines->__get(i)->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),hx::paccDynamic);
HXLINE(  35)				 ::Dynamic(this->trackData->__Field(HX_("e",65,00,00,00),hx::paccDynamic))->__GetItem(i)->__SetField(HX_("inv",f1,0c,50,00), ::Dynamic(this->lines->__get(i)->__Field(HX_("inv",f1,0c,50,00),hx::paccDynamic)),hx::paccDynamic);
HXLINE(  36)				 ::Dynamic(this->trackData->__Field(HX_("e",65,00,00,00),hx::paccDynamic))->__GetItem(i)->__SetField(HX_("lim",50,4f,52,00), ::Dynamic(this->lines->__get(i)->__Field(HX_("_lim",51,94,1d,3f),hx::paccDynamic)),hx::paccDynamic);
HXLINE(  37)				 ::Dynamic(this->trackData->__Field(HX_("e",65,00,00,00),hx::paccDynamic))->__GetItem(i)->__SetField(HX_("ID",db,3f,00,00), ::Dynamic(this->lines->__get(i)->__Field(HX_("ID",db,3f,00,00),hx::paccDynamic)),hx::paccDynamic);
            			}
            		}
HXLINE(  40)		return this->trackData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrackParse_obj,parse,return )


hx::ObjectPtr< TrackParse_obj > TrackParse_obj::__new() {
	hx::ObjectPtr< TrackParse_obj > __this = new TrackParse_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TrackParse_obj > TrackParse_obj::__alloc(hx::Ctx *_hx_ctx) {
	TrackParse_obj *__this = (TrackParse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TrackParse_obj), true, "file.TrackParse"));
	*(void **)__this = TrackParse_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TrackParse_obj::TrackParse_obj()
{
}

void TrackParse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TrackParse);
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(trackData,"trackData");
	HX_MARK_END_CLASS();
}

void TrackParse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(trackData,"trackData");
}

hx::Val TrackParse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { return hx::Val( lines); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"trackData") ) { return hx::Val( trackData); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TrackParse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"trackData") ) { trackData=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TrackParse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"));
	outFields->push(HX_HCSTRING("trackData","\x55","\xb2","\xed","\x2d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TrackParse_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(TrackParse_obj,lines),HX_HCSTRING("lines","\xff","\xdd","\x01","\x75")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TrackParse_obj,trackData),HX_HCSTRING("trackData","\x55","\xb2","\xed","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TrackParse_obj_sStaticStorageInfo = 0;
#endif

static ::String TrackParse_obj_sMemberFields[] = {
	HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"),
	HX_HCSTRING("trackData","\x55","\xb2","\xed","\x2d"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null()) };

static void TrackParse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TrackParse_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TrackParse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TrackParse_obj::__mClass,"__mClass");
};

#endif

hx::Class TrackParse_obj::__mClass;

void TrackParse_obj::__register()
{
	hx::Object *dummy = new TrackParse_obj;
	TrackParse_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("file.TrackParse","\x7a","\x2e","\x98","\x9c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TrackParse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TrackParse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TrackParse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TrackParse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrackParse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrackParse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace file
