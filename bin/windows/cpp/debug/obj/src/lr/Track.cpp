// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_global_Common
#include <global/Common.h>
#endif
#ifndef INCLUDED_lr_Track
#include <lr/Track.h>
#endif
#ifndef INCLUDED_lr_line_Grid
#include <lr/line/Grid.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f9b804989ab5517c_17_new,"lr.Track","new",0x6e6f3cf5,"lr.Track.new","lr/Track.hx",17,0x1293c11c)
HX_LOCAL_STACK_FRAME(_hx_pos_f9b804989ab5517c_23_add_vis_line,"lr.Track","add_vis_line",0xd2e313dc,"lr.Track.add_vis_line","lr/Track.hx",23,0x1293c11c)
HX_LOCAL_STACK_FRAME(_hx_pos_f9b804989ab5517c_28_render_preview_line,"lr.Track","render_preview_line",0x44ad2729,"lr.Track.render_preview_line","lr/Track.hx",28,0x1293c11c)
HX_LOCAL_STACK_FRAME(_hx_pos_f9b804989ab5517c_41_clear_preview,"lr.Track","clear_preview",0xe3cd58eb,"lr.Track.clear_preview","lr/Track.hx",41,0x1293c11c)
namespace lr{

void Track_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f9b804989ab5517c_17_new)
HXLINE(  18)		super::__construct();
HXLINE(  19)		::global::Common_obj::gTrack = hx::ObjectPtr<OBJ_>(this);
HXLINE(  20)		::global::Common_obj::track_scale = (int)1;
HXLINE(  21)		this->grid =  ::lr::line::Grid_obj::__alloc( HX_CTX );
            	}

Dynamic Track_obj::__CreateEmpty() { return new Track_obj; }

void *Track_obj::_hx_vtable = 0;

Dynamic Track_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Track_obj > _hx_result = new Track_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Track_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x13706b39) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x13706b39;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x21e31f0e;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Track_obj::add_vis_line( ::Dynamic line){
            	HX_STACKFRAME(&_hx_pos_f9b804989ab5517c_23_add_vis_line)
HXLINE(  24)		::global::Common_obj::gGrid->massLineIndex(line);
HXLINE(  25)		::global::Common_obj::gTrack->addChild(( ( ::openfl::display::DisplayObject)(line) ));
HXLINE(  26)		line->__Field(HX_("render",56,6b,29,05),hx::paccDynamic)();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Track_obj,add_vis_line,(void))

void Track_obj::render_preview_line( ::openfl::geom::Point _a, ::openfl::geom::Point _b){
            	HX_STACKFRAME(&_hx_pos_f9b804989ab5517c_28_render_preview_line)
HXLINE(  29)		Float _locDis = ::global::Common_obj::get_distance(_a,_b);
HXLINE(  30)		int _locCol = (int)16711680;
HXLINE(  31)		if ((_locDis > ::global::Common_obj::line_minLength)) {
HXLINE(  32)			_locCol = (int)0;
            		}
HXLINE(  34)		this->get_graphics()->clear();
HXLINE(  35)		this->get_graphics()->lineStyle((int)4,_locCol,(int)1,null(),null(),null(),null(),null());
HXLINE(  36)		this->get_graphics()->moveTo(_a->x,_a->y);
HXLINE(  37)		this->get_graphics()->lineTo(_b->x,_b->y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Track_obj,render_preview_line,(void))

void Track_obj::clear_preview(){
            	HX_STACKFRAME(&_hx_pos_f9b804989ab5517c_41_clear_preview)
HXLINE(  41)		this->get_graphics()->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Track_obj,clear_preview,(void))


hx::ObjectPtr< Track_obj > Track_obj::__new() {
	hx::ObjectPtr< Track_obj > __this = new Track_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Track_obj > Track_obj::__alloc(hx::Ctx *_hx_ctx) {
	Track_obj *__this = (Track_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Track_obj), true, "lr.Track"));
	*(void **)__this = Track_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Track_obj::Track_obj()
{
}

void Track_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Track);
	HX_MARK_MEMBER_NAME(grid,"grid");
	 ::openfl::display::MovieClip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Track_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grid,"grid");
	 ::openfl::display::MovieClip_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Track_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { return hx::Val( grid); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"add_vis_line") ) { return hx::Val( add_vis_line_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"clear_preview") ) { return hx::Val( clear_preview_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"render_preview_line") ) { return hx::Val( render_preview_line_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Track_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { grid=inValue.Cast<  ::lr::line::Grid >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Track_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("grid","\xc6","\xd6","\x6b","\x44"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Track_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lr::line::Grid*/ ,(int)offsetof(Track_obj,grid),HX_HCSTRING("grid","\xc6","\xd6","\x6b","\x44")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Track_obj_sStaticStorageInfo = 0;
#endif

static ::String Track_obj_sMemberFields[] = {
	HX_HCSTRING("grid","\xc6","\xd6","\x6b","\x44"),
	HX_HCSTRING("add_vis_line","\x11","\x3b","\x74","\x06"),
	HX_HCSTRING("render_preview_line","\x94","\x80","\x10","\x9c"),
	HX_HCSTRING("clear_preview","\x16","\x80","\x3e","\xcf"),
	::String(null()) };

static void Track_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Track_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Track_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Track_obj::__mClass,"__mClass");
};

#endif

hx::Class Track_obj::__mClass;

void Track_obj::__register()
{
	hx::Object *dummy = new Track_obj;
	Track_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lr.Track","\x83","\x9e","\x8e","\xb3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Track_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Track_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Track_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Track_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Track_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Track_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lr
