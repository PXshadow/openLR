// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_global_Common
#include <global/Common.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lr_line_Grid
#include <lr/line/Grid.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0c86f2f20bd0cd73_31_new,"lr.line.Grid","new",0xf463aeaa,"lr.line.Grid.new","lr/line/Grid.hx",31,0x1f9d43a6)
HX_LOCAL_STACK_FRAME(_hx_pos_0c86f2f20bd0cd73_36_massLineIndex,"lr.line.Grid","massLineIndex",0xe6daddb4,"lr.line.Grid.massLineIndex","lr/line/Grid.hx",36,0x1f9d43a6)
namespace lr{
namespace line{

void Grid_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0c86f2f20bd0cd73_31_new)
HXLINE(  32)		this->lines = ::cpp::VirtualArray_obj::__new();
HXLINE(  33)		::global::Common_obj::gGrid = hx::ObjectPtr<OBJ_>(this);
            	}

Dynamic Grid_obj::__CreateEmpty() { return new Grid_obj; }

void *Grid_obj::_hx_vtable = 0;

Dynamic Grid_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Grid_obj > _hx_result = new Grid_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Grid_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12781da8;
}

void Grid_obj::massLineIndex( ::Dynamic line){
            	HX_STACKFRAME(&_hx_pos_0c86f2f20bd0cd73_36_massLineIndex)
HXLINE(  37)		this->lines->push(line);
HXLINE(  38)		 ::Dynamic _hx_tmp = hx::ClassOf< ::global::Common >();
HXDLIN(  38)		::global::Common_obj::sLineCount = (::global::Common_obj::sLineCount + (int)1);
HXLINE(  39)		if (hx::IsEq(  ::Dynamic(line->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),(int)0 )) {
HXLINE(  40)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::global::Common >();
HXDLIN(  40)			::global::Common_obj::sBLueLineCount = (::global::Common_obj::sBLueLineCount + (int)1);
            		}
            		else {
HXLINE(  41)			if (hx::IsEq(  ::Dynamic(line->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),(int)1 )) {
HXLINE(  42)				 ::Dynamic _hx_tmp2 = hx::ClassOf< ::global::Common >();
HXDLIN(  42)				::global::Common_obj::sRedLineCount = (::global::Common_obj::sRedLineCount + (int)1);
            			}
            			else {
HXLINE(  43)				if (hx::IsEq(  ::Dynamic(line->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),(int)2 )) {
HXLINE(  44)					 ::Dynamic _hx_tmp3 = hx::ClassOf< ::global::Common >();
HXDLIN(  44)					::global::Common_obj::sGreenLineCount = (::global::Common_obj::sGreenLineCount + (int)1);
            				}
            			}
            		}
HXLINE(  46)		::haxe::Log_obj::trace(::global::Common_obj::sLineCount, ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("lr.line.Grid",b8,d1,b0,0c))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(3)->init(0,::global::Common_obj::sBLueLineCount)->init(1,::global::Common_obj::sRedLineCount)->init(2,::global::Common_obj::sGreenLineCount))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("massLineIndex",ea,7e,be,88))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("Grid.hx",98,93,72,d4))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),(int)46)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grid_obj,massLineIndex,(void))


hx::ObjectPtr< Grid_obj > Grid_obj::__new() {
	hx::ObjectPtr< Grid_obj > __this = new Grid_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Grid_obj > Grid_obj::__alloc(hx::Ctx *_hx_ctx) {
	Grid_obj *__this = (Grid_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Grid_obj), true, "lr.line.Grid"));
	*(void **)__this = Grid_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Grid_obj::Grid_obj()
{
}

void Grid_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Grid);
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(grid0,"grid0");
	HX_MARK_MEMBER_NAME(grid1,"grid1");
	HX_MARK_MEMBER_NAME(grid2,"grid2");
	HX_MARK_MEMBER_NAME(grid3,"grid3");
	HX_MARK_END_CLASS();
}

void Grid_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(grid0,"grid0");
	HX_VISIT_MEMBER_NAME(grid1,"grid1");
	HX_VISIT_MEMBER_NAME(grid2,"grid2");
	HX_VISIT_MEMBER_NAME(grid3,"grid3");
}

hx::Val Grid_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { return hx::Val( lines); }
		if (HX_FIELD_EQ(inName,"grid0") ) { return hx::Val( grid0); }
		if (HX_FIELD_EQ(inName,"grid1") ) { return hx::Val( grid1); }
		if (HX_FIELD_EQ(inName,"grid2") ) { return hx::Val( grid2); }
		if (HX_FIELD_EQ(inName,"grid3") ) { return hx::Val( grid3); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"massLineIndex") ) { return hx::Val( massLineIndex_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Grid_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grid0") ) { grid0=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grid1") ) { grid1=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grid2") ) { grid2=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grid3") ) { grid3=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Grid_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"));
	outFields->push(HX_HCSTRING("grid0","\xaa","\x16","\xf0","\x99"));
	outFields->push(HX_HCSTRING("grid1","\xab","\x16","\xf0","\x99"));
	outFields->push(HX_HCSTRING("grid2","\xac","\x16","\xf0","\x99"));
	outFields->push(HX_HCSTRING("grid3","\xad","\x16","\xf0","\x99"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Grid_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Grid_obj,lines),HX_HCSTRING("lines","\xff","\xdd","\x01","\x75")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Grid_obj,grid0),HX_HCSTRING("grid0","\xaa","\x16","\xf0","\x99")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Grid_obj,grid1),HX_HCSTRING("grid1","\xab","\x16","\xf0","\x99")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Grid_obj,grid2),HX_HCSTRING("grid2","\xac","\x16","\xf0","\x99")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Grid_obj,grid3),HX_HCSTRING("grid3","\xad","\x16","\xf0","\x99")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Grid_obj_sStaticStorageInfo = 0;
#endif

static ::String Grid_obj_sMemberFields[] = {
	HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"),
	HX_HCSTRING("grid0","\xaa","\x16","\xf0","\x99"),
	HX_HCSTRING("grid1","\xab","\x16","\xf0","\x99"),
	HX_HCSTRING("grid2","\xac","\x16","\xf0","\x99"),
	HX_HCSTRING("grid3","\xad","\x16","\xf0","\x99"),
	HX_HCSTRING("massLineIndex","\xea","\x7e","\xbe","\x88"),
	::String(null()) };

static void Grid_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Grid_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Grid_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Grid_obj::__mClass,"__mClass");
};

#endif

hx::Class Grid_obj::__mClass;

void Grid_obj::__register()
{
	hx::Object *dummy = new Grid_obj;
	Grid_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lr.line.Grid","\xb8","\xd1","\xb0","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Grid_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Grid_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Grid_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Grid_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Grid_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Grid_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lr
} // end namespace line
