// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_global_Common
#include <global/Common.h>
#endif
#ifndef INCLUDED_lr_Toolbar
#include <lr/Toolbar.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_ui_tool_ToolBase
#include <ui/tool/ToolBase.h>
#endif
#ifndef INCLUDED_ui_tool_icon_IconBase
#include <ui/tool/icon/IconBase.h>
#endif
#ifndef INCLUDED_ui_tool_icon_IconLine
#include <ui/tool/icon/IconLine.h>
#endif
#ifndef INCLUDED_ui_tool_lr_ToolLine
#include <ui/tool/lr/ToolLine.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_85f7f0ac77163261_22_new,"ui.tool.icon.IconLine","new",0x8a75f5f8,"ui.tool.icon.IconLine.new","ui/tool/icon/IconLine.hx",22,0x93627a77)
HX_LOCAL_STACK_FRAME(_hx_pos_85f7f0ac77163261_27_down,"ui.tool.icon.IconLine","down",0x962cb7ca,"ui.tool.icon.IconLine.down","ui/tool/icon/IconLine.hx",27,0x93627a77)
namespace ui{
namespace tool{
namespace icon{

void IconLine_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_85f7f0ac77163261_22_new)
HXLINE(  23)		super::__construct();
HXLINE(  24)		this->icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getBitmapData(HX_("icon/line.png",c5,77,ca,b4),null()),null(),null());
HXLINE(  25)		this->addChild(this->icon);
            	}

Dynamic IconLine_obj::__CreateEmpty() { return new IconLine_obj; }

void *IconLine_obj::_hx_vtable = 0;

Dynamic IconLine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IconLine_obj > _hx_result = new IconLine_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IconLine_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0f1199ef) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0f1199ef;
			}
		} else {
			return inClassId==(int)0x15b3c9d2 || inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			if (inClassId<=(int)0x1b123bf8) {
				return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
			} else {
				return inClassId==(int)0x21e31f0e;
			}
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void IconLine_obj::down( ::openfl::events::MouseEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_85f7f0ac77163261_27_down)
HXLINE(  28)		::global::Common_obj::gToolBase->disable();
HXLINE(  29)		::lr::Toolbar_obj::tool =  ::ui::tool::lr::ToolLine_obj::__alloc( HX_CTX );
            	}



hx::ObjectPtr< IconLine_obj > IconLine_obj::__new() {
	hx::ObjectPtr< IconLine_obj > __this = new IconLine_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< IconLine_obj > IconLine_obj::__alloc(hx::Ctx *_hx_ctx) {
	IconLine_obj *__this = (IconLine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IconLine_obj), true, "ui.tool.icon.IconLine"));
	*(void **)__this = IconLine_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

IconLine_obj::IconLine_obj()
{
}

hx::Val IconLine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IconLine_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IconLine_obj_sStaticStorageInfo = 0;
#endif

static ::String IconLine_obj_sMemberFields[] = {
	HX_HCSTRING("down","\x62","\xf8","\x6d","\x42"),
	::String(null()) };

static void IconLine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IconLine_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IconLine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IconLine_obj::__mClass,"__mClass");
};

#endif

hx::Class IconLine_obj::__mClass;

void IconLine_obj::__register()
{
	hx::Object *dummy = new IconLine_obj;
	IconLine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ui.tool.icon.IconLine","\x06","\xda","\x5d","\xaa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IconLine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IconLine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IconLine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IconLine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IconLine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IconLine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tool
} // end namespace icon
