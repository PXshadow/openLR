// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_file_SaveManager
#include <file/SaveManager.h>
#endif
#ifndef INCLUDED_global_Common
#include <global/Common.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_ui_tool_icon_IconBase
#include <ui/tool/icon/IconBase.h>
#endif
#ifndef INCLUDED_ui_tool_icon_IconSave
#include <ui/tool/icon/IconSave.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1bed8e192934948a_20_new,"ui.tool.icon.IconSave","new",0x010641c1,"ui.tool.icon.IconSave.new","ui/tool/icon/IconSave.hx",20,0x1ed27ace)
HX_LOCAL_STACK_FRAME(_hx_pos_1bed8e192934948a_26_down,"ui.tool.icon.IconSave","down",0xdddebbe1,"ui.tool.icon.IconSave.down","ui/tool/icon/IconSave.hx",26,0x1ed27ace)
namespace ui{
namespace tool{
namespace icon{

void IconSave_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1bed8e192934948a_20_new)
HXLINE(  21)		super::__construct();
HXLINE(  22)		this->icon =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getBitmapData(HX_("icon/save.png",8e,c3,5a,2b),null()),null(),null());
HXLINE(  23)		this->addChild(this->icon);
            	}

Dynamic IconSave_obj::__CreateEmpty() { return new IconSave_obj; }

void *IconSave_obj::_hx_vtable = 0;

Dynamic IconSave_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IconSave_obj > _hx_result = new IconSave_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IconSave_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0f1199ef) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0f1199ef;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			if (inClassId<=(int)0x1b123bf8) {
				return inClassId==(int)0x1a4e3d1b || inClassId==(int)0x1b123bf8;
			} else {
				return inClassId==(int)0x21e31f0e;
			}
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void IconSave_obj::down( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_1bed8e192934948a_26_down)
HXLINE(  26)		::global::Common_obj::gSaveManager->generateSave();
            	}



hx::ObjectPtr< IconSave_obj > IconSave_obj::__new() {
	hx::ObjectPtr< IconSave_obj > __this = new IconSave_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< IconSave_obj > IconSave_obj::__alloc(hx::Ctx *_hx_ctx) {
	IconSave_obj *__this = (IconSave_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IconSave_obj), true, "ui.tool.icon.IconSave"));
	*(void **)__this = IconSave_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

IconSave_obj::IconSave_obj()
{
}

hx::Val IconSave_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IconSave_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IconSave_obj_sStaticStorageInfo = 0;
#endif

static ::String IconSave_obj_sMemberFields[] = {
	HX_HCSTRING("down","\x62","\xf8","\x6d","\x42"),
	::String(null()) };

static void IconSave_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IconSave_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IconSave_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IconSave_obj::__mClass,"__mClass");
};

#endif

hx::Class IconSave_obj::__mClass;

void IconSave_obj::__register()
{
	hx::Object *dummy = new IconSave_obj;
	IconSave_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ui.tool.icon.IconSave","\x4f","\x4d","\xf8","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IconSave_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IconSave_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IconSave_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IconSave_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IconSave_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IconSave_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tool
} // end namespace icon
