// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_global_Common
#include <global/Common.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_ui_tool_ToolBase
#include <ui/tool/ToolBase.h>
#endif
#ifndef INCLUDED_ui_tool_icon_IconBase
#include <ui/tool/icon/IconBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_330102231cfe36ba_13_new,"ui.tool.icon.IconBase","new",0x019a9895,"ui.tool.icon.IconBase.new","ui/tool/icon/IconBase.hx",13,0xa1b1da7a)
HX_LOCAL_STACK_FRAME(_hx_pos_330102231cfe36ba_43_alt,"ui.tool.icon.IconBase","alt",0x0190c15e,"ui.tool.icon.IconBase.alt","ui/tool/icon/IconBase.hx",43,0xa1b1da7a)
HX_LOCAL_STACK_FRAME(_hx_pos_330102231cfe36ba_48_down,"ui.tool.icon.IconBase","down",0x5f165e8d,"ui.tool.icon.IconBase.down","ui/tool/icon/IconBase.hx",48,0xa1b1da7a)
HX_LOCAL_STACK_FRAME(_hx_pos_330102231cfe36ba_52_enable_tool,"ui.tool.icon.IconBase","enable_tool",0x34fdd309,"ui.tool.icon.IconBase.enable_tool","ui/tool/icon/IconBase.hx",52,0xa1b1da7a)
HX_LOCAL_STACK_FRAME(_hx_pos_330102231cfe36ba_58_disable_tool,"ui.tool.icon.IconBase","disable_tool",0x4e742d7a,"ui.tool.icon.IconBase.disable_tool","ui/tool/icon/IconBase.hx",58,0xa1b1da7a)
HX_LOCAL_STACK_FRAME(_hx_pos_330102231cfe36ba_63_enable,"ui.tool.icon.IconBase","enable",0xdcb6356e,"ui.tool.icon.IconBase.enable","ui/tool/icon/IconBase.hx",63,0xa1b1da7a)
namespace ui{
namespace tool{
namespace icon{

void IconBase_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_330102231cfe36ba_13_new)
HXLINE(  15)		this->debug_alpha = (int)0;
HXLINE(  19)		super::__construct();
HXLINE(  21)		if (::global::Common_obj::cvar_icon_hit_display) {
HXLINE(  22)			this->debug_alpha = (int)1;
            		}
HXLINE(  26)		this->get_graphics()->clear();
HXLINE(  27)		this->get_graphics()->lineStyle((int)2,(int)0,this->debug_alpha,null(),null(),null(),null(),null());
HXLINE(  28)		this->get_graphics()->beginFill((int)16777215,this->debug_alpha);
HXLINE(  29)		this->get_graphics()->moveTo((int)0,(int)0);
HXLINE(  30)		this->get_graphics()->lineTo((int)30,(int)0);
HXLINE(  31)		this->get_graphics()->lineTo((int)30,(int)30);
HXLINE(  32)		this->get_graphics()->lineTo((int)0,(int)30);
HXLINE(  33)		this->get_graphics()->lineTo((int)0,(int)0);
HXLINE(  35)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->disable_tool_dyn(),null(),null(),null());
HXLINE(  36)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->enable_tool_dyn(),null(),null(),null());
HXLINE(  37)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->down_dyn(),null(),null(),null());
HXLINE(  38)		this->addEventListener(HX_("rightMouseDown",ab,29,d7,cd),this->alt_dyn(),null(),null(),null());
            	}

Dynamic IconBase_obj::__CreateEmpty() { return new IconBase_obj; }

void *IconBase_obj::_hx_vtable = 0;

Dynamic IconBase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IconBase_obj > _hx_result = new IconBase_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool IconBase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0f1199ef) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0f1199ef;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x21e31f0e;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void IconBase_obj::alt( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_330102231cfe36ba_43_alt)
HXLINE(  43)		::haxe::Log_obj::trace(HX_("Alt behavior not yet set or not yet overidden",d6,75,15,0e),hx::SourceInfo(HX_("IconBase.hx",b4,a4,b3,21),43,HX_("ui.tool.icon.IconBase",23,aa,bb,a3),HX_("alt",29,f9,49,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconBase_obj,alt,(void))

void IconBase_obj::down( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_330102231cfe36ba_48_down)
HXLINE(  48)		::haxe::Log_obj::trace(HX_("action not yet overidden",4f,db,35,60),hx::SourceInfo(HX_("IconBase.hx",b4,a4,b3,21),48,HX_("ui.tool.icon.IconBase",23,aa,bb,a3),HX_("down",62,f8,6d,42)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconBase_obj,down,(void))

void IconBase_obj::enable_tool( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_330102231cfe36ba_52_enable_tool)
HXLINE(  53)		::global::Common_obj::gToolBase->enable();
HXLINE(  54)		this->set_alpha((int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconBase_obj,enable_tool,(void))

void IconBase_obj::disable_tool( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_330102231cfe36ba_58_disable_tool)
HXLINE(  59)		::global::Common_obj::gToolBase->disable();
HXLINE(  60)		this->set_alpha(((Float)0.75));
            	}


HX_DEFINE_DYNAMIC_FUNC1(IconBase_obj,disable_tool,(void))

void IconBase_obj::enable(){
            	HX_STACKFRAME(&_hx_pos_330102231cfe36ba_63_enable)
HXLINE(  64)		this->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->disable_tool_dyn(),null(),null(),null());
HXLINE(  65)		this->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->enable_tool_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(IconBase_obj,enable,(void))


hx::ObjectPtr< IconBase_obj > IconBase_obj::__new() {
	hx::ObjectPtr< IconBase_obj > __this = new IconBase_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< IconBase_obj > IconBase_obj::__alloc(hx::Ctx *_hx_ctx) {
	IconBase_obj *__this = (IconBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IconBase_obj), true, "ui.tool.icon.IconBase"));
	*(void **)__this = IconBase_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

IconBase_obj::IconBase_obj()
{
}

void IconBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IconBase);
	HX_MARK_MEMBER_NAME(debug_alpha,"debug_alpha");
	HX_MARK_MEMBER_NAME(icon,"icon");
	 ::openfl::display::MovieClip_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void IconBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(debug_alpha,"debug_alpha");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	 ::openfl::display::MovieClip_obj::__Visit(HX_VISIT_ARG);
}

hx::Val IconBase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"alt") ) { return hx::Val( alt_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return hx::Val( icon); }
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"enable") ) { return hx::Val( enable_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"debug_alpha") ) { return hx::Val( debug_alpha); }
		if (HX_FIELD_EQ(inName,"enable_tool") ) { return hx::Val( enable_tool_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"disable_tool") ) { return hx::Val( disable_tool_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IconBase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"debug_alpha") ) { debug_alpha=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IconBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("debug_alpha","\x32","\x41","\x5c","\xf1"));
	outFields->push(HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IconBase_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(IconBase_obj,debug_alpha),HX_HCSTRING("debug_alpha","\x32","\x41","\x5c","\xf1")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(IconBase_obj,icon),HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IconBase_obj_sStaticStorageInfo = 0;
#endif

static ::String IconBase_obj_sMemberFields[] = {
	HX_HCSTRING("debug_alpha","\x32","\x41","\x5c","\xf1"),
	HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"),
	HX_HCSTRING("alt","\x29","\xf9","\x49","\x00"),
	HX_HCSTRING("down","\x62","\xf8","\x6d","\x42"),
	HX_HCSTRING("enable_tool","\xd4","\x4d","\xb4","\x37"),
	HX_HCSTRING("disable_tool","\x4f","\x24","\x69","\xab"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	::String(null()) };

static void IconBase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IconBase_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IconBase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IconBase_obj::__mClass,"__mClass");
};

#endif

hx::Class IconBase_obj::__mClass;

void IconBase_obj::__register()
{
	hx::Object *dummy = new IconBase_obj;
	IconBase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ui.tool.icon.IconBase","\x23","\xaa","\xbb","\xa3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IconBase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IconBase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IconBase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IconBase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IconBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IconBase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace ui
} // end namespace tool
} // end namespace icon
