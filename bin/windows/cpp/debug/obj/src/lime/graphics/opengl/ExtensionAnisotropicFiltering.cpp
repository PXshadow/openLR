// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_opengl_ExtensionAnisotropicFiltering
#include <lime/graphics/opengl/ExtensionAnisotropicFiltering.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_599dc6ef2ed759e6_13_boot,"lime.graphics.opengl.ExtensionAnisotropicFiltering","boot",0xa5032c9d,"lime.graphics.opengl.ExtensionAnisotropicFiltering.boot","lime/graphics/opengl/ExtensionAnisotropicFiltering.hx",13,0x65a4eadc)
HX_LOCAL_STACK_FRAME(_hx_pos_599dc6ef2ed759e6_14_boot,"lime.graphics.opengl.ExtensionAnisotropicFiltering","boot",0xa5032c9d,"lime.graphics.opengl.ExtensionAnisotropicFiltering.boot","lime/graphics/opengl/ExtensionAnisotropicFiltering.hx",14,0x65a4eadc)
namespace lime{
namespace graphics{
namespace opengl{

void ExtensionAnisotropicFiltering_obj::__construct() { }

Dynamic ExtensionAnisotropicFiltering_obj::__CreateEmpty() { return new ExtensionAnisotropicFiltering_obj; }

void *ExtensionAnisotropicFiltering_obj::_hx_vtable = 0;

Dynamic ExtensionAnisotropicFiltering_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ExtensionAnisotropicFiltering_obj > _hx_result = new ExtensionAnisotropicFiltering_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ExtensionAnisotropicFiltering_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x40a3e8c9;
}

int ExtensionAnisotropicFiltering_obj::TEXTURE_MAX_ANISOTROPY_EXT;

int ExtensionAnisotropicFiltering_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT;


ExtensionAnisotropicFiltering_obj::ExtensionAnisotropicFiltering_obj()
{
}

bool ExtensionAnisotropicFiltering_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 26:
		if (HX_FIELD_EQ(inName,"TEXTURE_MAX_ANISOTROPY_EXT") ) { outValue = TEXTURE_MAX_ANISOTROPY_EXT; return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") ) { outValue = MAX_TEXTURE_MAX_ANISOTROPY_EXT; return true; }
	}
	return false;
}

bool ExtensionAnisotropicFiltering_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 26:
		if (HX_FIELD_EQ(inName,"TEXTURE_MAX_ANISOTROPY_EXT") ) { TEXTURE_MAX_ANISOTROPY_EXT=ioValue.Cast< int >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") ) { MAX_TEXTURE_MAX_ANISOTROPY_EXT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ExtensionAnisotropicFiltering_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ExtensionAnisotropicFiltering_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ExtensionAnisotropicFiltering_obj::TEXTURE_MAX_ANISOTROPY_EXT,HX_HCSTRING("TEXTURE_MAX_ANISOTROPY_EXT","\x63","\xc1","\x6c","\x51")},
	{hx::fsInt,(void *) &ExtensionAnisotropicFiltering_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT,HX_HCSTRING("MAX_TEXTURE_MAX_ANISOTROPY_EXT","\x7e","\x54","\xe7","\xa3")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ExtensionAnisotropicFiltering_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ExtensionAnisotropicFiltering_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ExtensionAnisotropicFiltering_obj::TEXTURE_MAX_ANISOTROPY_EXT,"TEXTURE_MAX_ANISOTROPY_EXT");
	HX_MARK_MEMBER_NAME(ExtensionAnisotropicFiltering_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT,"MAX_TEXTURE_MAX_ANISOTROPY_EXT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ExtensionAnisotropicFiltering_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ExtensionAnisotropicFiltering_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ExtensionAnisotropicFiltering_obj::TEXTURE_MAX_ANISOTROPY_EXT,"TEXTURE_MAX_ANISOTROPY_EXT");
	HX_VISIT_MEMBER_NAME(ExtensionAnisotropicFiltering_obj::MAX_TEXTURE_MAX_ANISOTROPY_EXT,"MAX_TEXTURE_MAX_ANISOTROPY_EXT");
};

#endif

hx::Class ExtensionAnisotropicFiltering_obj::__mClass;

static ::String ExtensionAnisotropicFiltering_obj_sStaticFields[] = {
	HX_HCSTRING("TEXTURE_MAX_ANISOTROPY_EXT","\x63","\xc1","\x6c","\x51"),
	HX_HCSTRING("MAX_TEXTURE_MAX_ANISOTROPY_EXT","\x7e","\x54","\xe7","\xa3"),
	::String(null())
};

void ExtensionAnisotropicFiltering_obj::__register()
{
	hx::Object *dummy = new ExtensionAnisotropicFiltering_obj;
	ExtensionAnisotropicFiltering_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.opengl.ExtensionAnisotropicFiltering","\xe3","\x8f","\x43","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ExtensionAnisotropicFiltering_obj::__GetStatic;
	__mClass->mSetStaticField = &ExtensionAnisotropicFiltering_obj::__SetStatic;
	__mClass->mMarkFunc = ExtensionAnisotropicFiltering_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ExtensionAnisotropicFiltering_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ExtensionAnisotropicFiltering_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ExtensionAnisotropicFiltering_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ExtensionAnisotropicFiltering_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ExtensionAnisotropicFiltering_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ExtensionAnisotropicFiltering_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_599dc6ef2ed759e6_13_boot)
HXLINE(  13)		TEXTURE_MAX_ANISOTROPY_EXT = (int)34046;
            	}
{
            	HX_STACKFRAME(&_hx_pos_599dc6ef2ed759e6_14_boot)
HXLINE(  14)		MAX_TEXTURE_MAX_ANISOTROPY_EXT = (int)34047;
            	}
}

} // end namespace lime
} // end namespace graphics
} // end namespace opengl
